#include "thirdparty/catch_amalgamated.hpp"

#include "types/string.hpp"
#include "utf8.hpp"

TEST_CASE("utf8::next_char works") {
    // $ - 1 byte, √± - 2, Êº¢ - 3, ùÑû - 4 in UTF-8
    String string = "$√±Êº¢ùÑû";

    auto cursor = string.cbegin();
    auto end = string.cend();

    auto result = utf8::next_char(cursor, end);
    REQUIRE(result.has_value());
    REQUIRE(*result == U'$');

    result = utf8::next_char(cursor, end);
    REQUIRE(result.has_value());
    REQUIRE(*result == U'√±');

    result = utf8::next_char(cursor, end);
    REQUIRE(result.has_value());
    REQUIRE(*result == U'Êº¢');

    result = utf8::next_char(cursor, end);
    REQUIRE(result.has_value());
    REQUIRE(*result == U'ùÑû');

    result = utf8::next_char(cursor, end);
    REQUIRE(!result.has_value());
    REQUIRE(result.error() == utf8::DecodingError::Eof);
}

// todo: add more tests
